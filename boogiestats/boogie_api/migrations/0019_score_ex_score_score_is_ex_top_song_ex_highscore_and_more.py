# Generated by Django 4.2.3 on 2023-08-05 09:57
import math

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def calculate_ex(score):
    if not score.has_judgments:
        return 0

    weights = {
        "fa+": 3.5,
        "fantastics": 3,
        "excellents": 2,
        "greats": 1,
        "held": 1,
        "mine": -1,
    }
    total_possible = score.total_steps * weights["fa+"] + (score.total_holds + score.total_rolls) * weights["held"]
    points = (
        score.fantastics_plus * weights["fa+"]
        + score.fantastics * weights["fantastics"]
        + score.excellents * weights["excellents"]
        + score.greats * weights["greats"]
        + score.rolls_held * weights["held"]
        + score.holds_held * weights["held"]
        + score.mines_hit * weights["mine"]
    )

    try:
        return int(max(0, math.floor(points / total_possible * 10_000)))
    except ZeroDivisionError:
        return 0


def fill_ex_scores(apps, schema_editor):
    Score = apps.get_model("boogie_api", "Score")
    for score in Score.objects.all():
        score.ex_score = calculate_ex(score)
        score.save()


def fill_is_ex_top(apps, schema_editor):
    Song = apps.get_model("boogie_api", "Song")
    for song in Song.objects.all():
        unique_players = song.scores.values_list("player", flat=True).distinct()
        for player in unique_players:
            top_ex_score = song.scores.filter(player=player).order_by("-ex_score", "submission_date").first()
            top_ex_score.is_ex_top = True
            top_ex_score.save()


def fill_ex_highscores(apps, schema_editor):
    Song = apps.get_model("boogie_api", "Song")
    for song in Song.objects.all():
        highscore = song.scores.filter(is_ex_top=True).order_by("-ex_score", "submission_date").first()
        song.ex_highscore = highscore
        song.save()


class Migration(migrations.Migration):
    dependencies = [
        ("boogie_api", "0018_rename_is_top_score_is_itg_top_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="score",
            name="ex_score",
            field=models.PositiveIntegerField(
                db_index=True, default=0, validators=[django.core.validators.MaxValueValidator(10000)]
            ),
        ),
        migrations.AddField(
            model_name="score",
            name="is_ex_top",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="song",
            name="ex_highscore",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ex_highscore_for",
                to="boogie_api.score",
            ),
        ),
        migrations.AlterField(
            model_name="song",
            name="itg_highscore",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="itg_highscore_for",
                to="boogie_api.score",
            ),
        ),
        migrations.RunPython(fill_ex_scores),
        migrations.RunPython(fill_is_ex_top),
        migrations.RunPython(fill_ex_highscores),
    ]
